// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: definitions.proto

#ifndef PROTOBUF_INCLUDED_definitions_2eproto
#define PROTOBUF_INCLUDED_definitions_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_definitions_2eproto 

namespace protobuf_definitions_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_definitions_2eproto
namespace com {
namespace example {
namespace peopledensitymeasurementprototype {
namespace model {
namespace proto {
class DensityMap;
class DensityMapDefaultTypeInternal;
extern DensityMapDefaultTypeInternal _DensityMap_default_instance_;
class LocationMessageWrapper;
class LocationMessageWrapperDefaultTypeInternal;
extern LocationMessageWrapperDefaultTypeInternal _LocationMessageWrapper_default_instance_;
class SingleLocationData;
class SingleLocationDataDefaultTypeInternal;
extern SingleLocationDataDefaultTypeInternal _SingleLocationData_default_instance_;
class WarnMessage;
class WarnMessageDefaultTypeInternal;
extern WarnMessageDefaultTypeInternal _WarnMessage_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace peopledensitymeasurementprototype
}  // namespace example
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap* Arena::CreateMaybeMessage<::com::example::peopledensitymeasurementprototype::model::proto::DensityMap>(Arena*);
template<> ::com::example::peopledensitymeasurementprototype::model::proto::LocationMessageWrapper* Arena::CreateMaybeMessage<::com::example::peopledensitymeasurementprototype::model::proto::LocationMessageWrapper>(Arena*);
template<> ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* Arena::CreateMaybeMessage<::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData>(Arena*);
template<> ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage* Arena::CreateMaybeMessage<::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace example {
namespace peopledensitymeasurementprototype {
namespace model {
namespace proto {

// ===================================================================

class SingleLocationData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData) */ {
 public:
  SingleLocationData();
  virtual ~SingleLocationData();

  SingleLocationData(const SingleLocationData& from);

  inline SingleLocationData& operator=(const SingleLocationData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleLocationData(SingleLocationData&& from) noexcept
    : SingleLocationData() {
    *this = ::std::move(from);
  }

  inline SingleLocationData& operator=(SingleLocationData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleLocationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleLocationData* internal_default_instance() {
    return reinterpret_cast<const SingleLocationData*>(
               &_SingleLocationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SingleLocationData* other);
  friend void swap(SingleLocationData& a, SingleLocationData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleLocationData* New() const final {
    return CreateMaybeMessage<SingleLocationData>(NULL);
  }

  SingleLocationData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SingleLocationData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SingleLocationData& from);
  void MergeFrom(const SingleLocationData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleLocationData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int32 deviceId = 1;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  ::google::protobuf::int32 deviceid() const;
  void set_deviceid(::google::protobuf::int32 value);

  // int32 zoneId = 3;
  void clear_zoneid();
  static const int kZoneIdFieldNumber = 3;
  ::google::protobuf::int32 zoneid() const;
  void set_zoneid(::google::protobuf::int32 value);

  // bool hemisphere = 4;
  void clear_hemisphere();
  static const int kHemisphereFieldNumber = 4;
  bool hemisphere() const;
  void set_hemisphere(bool value);

  // int32 northing = 5;
  void clear_northing();
  static const int kNorthingFieldNumber = 5;
  ::google::protobuf::int32 northing() const;
  void set_northing(::google::protobuf::int32 value);

  // int32 easting = 6;
  void clear_easting();
  static const int kEastingFieldNumber = 6;
  ::google::protobuf::int32 easting() const;
  void set_easting(::google::protobuf::int32 value);

  // int32 bearing = 7;
  void clear_bearing();
  static const int kBearingFieldNumber = 7;
  ::google::protobuf::int32 bearing() const;
  void set_bearing(::google::protobuf::int32 value);

  // int32 speed = 8;
  void clear_speed();
  static const int kSpeedFieldNumber = 8;
  ::google::protobuf::int32 speed() const;
  void set_speed(::google::protobuf::int32 value);

  // float accuracy = 9;
  void clear_accuracy();
  static const int kAccuracyFieldNumber = 9;
  float accuracy() const;
  void set_accuracy(float value);

  // int32 ttl = 10;
  void clear_ttl();
  static const int kTtlFieldNumber = 10;
  ::google::protobuf::int32 ttl() const;
  void set_ttl(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 deviceid_;
  ::google::protobuf::int32 zoneid_;
  bool hemisphere_;
  ::google::protobuf::int32 northing_;
  ::google::protobuf::int32 easting_;
  ::google::protobuf::int32 bearing_;
  ::google::protobuf::int32 speed_;
  float accuracy_;
  ::google::protobuf::int32 ttl_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_definitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DensityMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.example.peopledensitymeasurementprototype.model.proto.DensityMap) */ {
 public:
  DensityMap();
  virtual ~DensityMap();

  DensityMap(const DensityMap& from);

  inline DensityMap& operator=(const DensityMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DensityMap(DensityMap&& from) noexcept
    : DensityMap() {
    *this = ::std::move(from);
  }

  inline DensityMap& operator=(DensityMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DensityMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DensityMap* internal_default_instance() {
    return reinterpret_cast<const DensityMap*>(
               &_DensityMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DensityMap* other);
  friend void swap(DensityMap& a, DensityMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DensityMap* New() const final {
    return CreateMaybeMessage<DensityMap>(NULL);
  }

  DensityMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DensityMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DensityMap& from);
  void MergeFrom(const DensityMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DensityMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField< ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData >*
      mutable_data();
  const ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData& data(int index) const;
  ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* add_data();
  const ::google::protobuf::RepeatedPtrField< ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData >&
      data() const;

  // int32 senderDeviceId = 1;
  void clear_senderdeviceid();
  static const int kSenderDeviceIdFieldNumber = 1;
  ::google::protobuf::int32 senderdeviceid() const;
  void set_senderdeviceid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.example.peopledensitymeasurementprototype.model.proto.DensityMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData > data_;
  ::google::protobuf::int32 senderdeviceid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_definitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WarnMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage) */ {
 public:
  WarnMessage();
  virtual ~WarnMessage();

  WarnMessage(const WarnMessage& from);

  inline WarnMessage& operator=(const WarnMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WarnMessage(WarnMessage&& from) noexcept
    : WarnMessage() {
    *this = ::std::move(from);
  }

  inline WarnMessage& operator=(WarnMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WarnMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WarnMessage* internal_default_instance() {
    return reinterpret_cast<const WarnMessage*>(
               &_WarnMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(WarnMessage* other);
  friend void swap(WarnMessage& a, WarnMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WarnMessage* New() const final {
    return CreateMaybeMessage<WarnMessage>(NULL);
  }

  WarnMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WarnMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WarnMessage& from);
  void MergeFrom(const WarnMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WarnMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int64 validUntil = 2;
  void clear_validuntil();
  static const int kValidUntilFieldNumber = 2;
  ::google::protobuf::int64 validuntil() const;
  void set_validuntil(::google::protobuf::int64 value);

  // double latitude = 3;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  double latitude() const;
  void set_latitude(double value);

  // double longitude = 4;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  double longitude() const;
  void set_longitude(double value);

  // @@protoc_insertion_point(class_scope:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int64 validuntil_;
  double latitude_;
  double longitude_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_definitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LocationMessageWrapper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper) */ {
 public:
  LocationMessageWrapper();
  virtual ~LocationMessageWrapper();

  LocationMessageWrapper(const LocationMessageWrapper& from);

  inline LocationMessageWrapper& operator=(const LocationMessageWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocationMessageWrapper(LocationMessageWrapper&& from) noexcept
    : LocationMessageWrapper() {
    *this = ::std::move(from);
  }

  inline LocationMessageWrapper& operator=(LocationMessageWrapper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationMessageWrapper& default_instance();

  enum MsgCase {
    kSingle = 1,
    kMap = 2,
    kMessage = 3,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationMessageWrapper* internal_default_instance() {
    return reinterpret_cast<const LocationMessageWrapper*>(
               &_LocationMessageWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LocationMessageWrapper* other);
  friend void swap(LocationMessageWrapper& a, LocationMessageWrapper& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocationMessageWrapper* New() const final {
    return CreateMaybeMessage<LocationMessageWrapper>(NULL);
  }

  LocationMessageWrapper* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LocationMessageWrapper>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LocationMessageWrapper& from);
  void MergeFrom(const LocationMessageWrapper& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationMessageWrapper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData single = 1;
  bool has_single() const;
  void clear_single();
  static const int kSingleFieldNumber = 1;
  private:
  const ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData& _internal_single() const;
  public:
  const ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData& single() const;
  ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* release_single();
  ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* mutable_single();
  void set_allocated_single(::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* single);

  // .com.example.peopledensitymeasurementprototype.model.proto.DensityMap map = 2;
  bool has_map() const;
  void clear_map();
  static const int kMapFieldNumber = 2;
  private:
  const ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap& _internal_map() const;
  public:
  const ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap& map() const;
  ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap* release_map();
  ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap* mutable_map();
  void set_allocated_map(::com::example::peopledensitymeasurementprototype::model::proto::DensityMap* map);

  // .com.example.peopledensitymeasurementprototype.model.proto.WarnMessage message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  private:
  const ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage& _internal_message() const;
  public:
  const ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage& message() const;
  ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage* release_message();
  ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage* mutable_message();
  void set_allocated_message(::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage* message);

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper)
 private:
  void set_has_single();
  void set_has_map();
  void set_has_message();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union MsgUnion {
    MsgUnion() {}
    ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* single_;
    ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap* map_;
    ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage* message_;
  } msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_definitions_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SingleLocationData

// int32 deviceId = 1;
inline void SingleLocationData::clear_deviceid() {
  deviceid_ = 0;
}
inline ::google::protobuf::int32 SingleLocationData::deviceid() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.deviceId)
  return deviceid_;
}
inline void SingleLocationData::set_deviceid(::google::protobuf::int32 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.deviceId)
}

// int64 timestamp = 2;
inline void SingleLocationData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleLocationData::timestamp() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.timestamp)
  return timestamp_;
}
inline void SingleLocationData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.timestamp)
}

// int32 zoneId = 3;
inline void SingleLocationData::clear_zoneid() {
  zoneid_ = 0;
}
inline ::google::protobuf::int32 SingleLocationData::zoneid() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.zoneId)
  return zoneid_;
}
inline void SingleLocationData::set_zoneid(::google::protobuf::int32 value) {
  
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.zoneId)
}

// bool hemisphere = 4;
inline void SingleLocationData::clear_hemisphere() {
  hemisphere_ = false;
}
inline bool SingleLocationData::hemisphere() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.hemisphere)
  return hemisphere_;
}
inline void SingleLocationData::set_hemisphere(bool value) {
  
  hemisphere_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.hemisphere)
}

// int32 northing = 5;
inline void SingleLocationData::clear_northing() {
  northing_ = 0;
}
inline ::google::protobuf::int32 SingleLocationData::northing() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.northing)
  return northing_;
}
inline void SingleLocationData::set_northing(::google::protobuf::int32 value) {
  
  northing_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.northing)
}

// int32 easting = 6;
inline void SingleLocationData::clear_easting() {
  easting_ = 0;
}
inline ::google::protobuf::int32 SingleLocationData::easting() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.easting)
  return easting_;
}
inline void SingleLocationData::set_easting(::google::protobuf::int32 value) {
  
  easting_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.easting)
}

// int32 bearing = 7;
inline void SingleLocationData::clear_bearing() {
  bearing_ = 0;
}
inline ::google::protobuf::int32 SingleLocationData::bearing() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.bearing)
  return bearing_;
}
inline void SingleLocationData::set_bearing(::google::protobuf::int32 value) {
  
  bearing_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.bearing)
}

// int32 speed = 8;
inline void SingleLocationData::clear_speed() {
  speed_ = 0;
}
inline ::google::protobuf::int32 SingleLocationData::speed() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.speed)
  return speed_;
}
inline void SingleLocationData::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.speed)
}

// float accuracy = 9;
inline void SingleLocationData::clear_accuracy() {
  accuracy_ = 0;
}
inline float SingleLocationData::accuracy() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.accuracy)
  return accuracy_;
}
inline void SingleLocationData::set_accuracy(float value) {
  
  accuracy_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.accuracy)
}

// int32 ttl = 10;
inline void SingleLocationData::clear_ttl() {
  ttl_ = 0;
}
inline ::google::protobuf::int32 SingleLocationData::ttl() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.ttl)
  return ttl_;
}
inline void SingleLocationData::set_ttl(::google::protobuf::int32 value) {
  
  ttl_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData.ttl)
}

// -------------------------------------------------------------------

// DensityMap

// int32 senderDeviceId = 1;
inline void DensityMap::clear_senderdeviceid() {
  senderdeviceid_ = 0;
}
inline ::google::protobuf::int32 DensityMap::senderdeviceid() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.DensityMap.senderDeviceId)
  return senderdeviceid_;
}
inline void DensityMap::set_senderdeviceid(::google::protobuf::int32 value) {
  
  senderdeviceid_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.DensityMap.senderDeviceId)
}

// repeated .com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData data = 2;
inline int DensityMap::data_size() const {
  return data_.size();
}
inline void DensityMap::clear_data() {
  data_.Clear();
}
inline ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* DensityMap::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:com.example.peopledensitymeasurementprototype.model.proto.DensityMap.data)
  return data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData >*
DensityMap::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:com.example.peopledensitymeasurementprototype.model.proto.DensityMap.data)
  return &data_;
}
inline const ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData& DensityMap::data(int index) const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.DensityMap.data)
  return data_.Get(index);
}
inline ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* DensityMap::add_data() {
  // @@protoc_insertion_point(field_add:com.example.peopledensitymeasurementprototype.model.proto.DensityMap.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData >&
DensityMap::data() const {
  // @@protoc_insertion_point(field_list:com.example.peopledensitymeasurementprototype.model.proto.DensityMap.data)
  return data_;
}

// -------------------------------------------------------------------

// WarnMessage

// string message = 1;
inline void WarnMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WarnMessage::message() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message)
  return message_.GetNoArena();
}
inline void WarnMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message)
}
#if LANG_CXX11
inline void WarnMessage::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message)
}
#endif
inline void WarnMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message)
}
inline void WarnMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message)
}
inline ::std::string* WarnMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WarnMessage::release_message() {
  // @@protoc_insertion_point(field_release:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WarnMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.message)
}

// int64 validUntil = 2;
inline void WarnMessage::clear_validuntil() {
  validuntil_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WarnMessage::validuntil() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.validUntil)
  return validuntil_;
}
inline void WarnMessage::set_validuntil(::google::protobuf::int64 value) {
  
  validuntil_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.validUntil)
}

// double latitude = 3;
inline void WarnMessage::clear_latitude() {
  latitude_ = 0;
}
inline double WarnMessage::latitude() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.latitude)
  return latitude_;
}
inline void WarnMessage::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.latitude)
}

// double longitude = 4;
inline void WarnMessage::clear_longitude() {
  longitude_ = 0;
}
inline double WarnMessage::longitude() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.longitude)
  return longitude_;
}
inline void WarnMessage::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.example.peopledensitymeasurementprototype.model.proto.WarnMessage.longitude)
}

// -------------------------------------------------------------------

// LocationMessageWrapper

// .com.example.peopledensitymeasurementprototype.model.proto.SingleLocationData single = 1;
inline bool LocationMessageWrapper::has_single() const {
  return msg_case() == kSingle;
}
inline void LocationMessageWrapper::set_has_single() {
  _oneof_case_[0] = kSingle;
}
inline void LocationMessageWrapper::clear_single() {
  if (has_single()) {
    delete msg_.single_;
    clear_has_msg();
  }
}
inline const ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData& LocationMessageWrapper::_internal_single() const {
  return *msg_.single_;
}
inline ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* LocationMessageWrapper::release_single() {
  // @@protoc_insertion_point(field_release:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.single)
  if (has_single()) {
    clear_has_msg();
      ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* temp = msg_.single_;
    msg_.single_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData& LocationMessageWrapper::single() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.single)
  return has_single()
      ? *msg_.single_
      : *reinterpret_cast< ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData*>(&::com::example::peopledensitymeasurementprototype::model::proto::_SingleLocationData_default_instance_);
}
inline ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData* LocationMessageWrapper::mutable_single() {
  if (!has_single()) {
    clear_msg();
    set_has_single();
    msg_.single_ = CreateMaybeMessage< ::com::example::peopledensitymeasurementprototype::model::proto::SingleLocationData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.single)
  return msg_.single_;
}

// .com.example.peopledensitymeasurementprototype.model.proto.DensityMap map = 2;
inline bool LocationMessageWrapper::has_map() const {
  return msg_case() == kMap;
}
inline void LocationMessageWrapper::set_has_map() {
  _oneof_case_[0] = kMap;
}
inline void LocationMessageWrapper::clear_map() {
  if (has_map()) {
    delete msg_.map_;
    clear_has_msg();
  }
}
inline const ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap& LocationMessageWrapper::_internal_map() const {
  return *msg_.map_;
}
inline ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap* LocationMessageWrapper::release_map() {
  // @@protoc_insertion_point(field_release:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.map)
  if (has_map()) {
    clear_has_msg();
      ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap* temp = msg_.map_;
    msg_.map_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap& LocationMessageWrapper::map() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.map)
  return has_map()
      ? *msg_.map_
      : *reinterpret_cast< ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap*>(&::com::example::peopledensitymeasurementprototype::model::proto::_DensityMap_default_instance_);
}
inline ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap* LocationMessageWrapper::mutable_map() {
  if (!has_map()) {
    clear_msg();
    set_has_map();
    msg_.map_ = CreateMaybeMessage< ::com::example::peopledensitymeasurementprototype::model::proto::DensityMap >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.map)
  return msg_.map_;
}

// .com.example.peopledensitymeasurementprototype.model.proto.WarnMessage message = 3;
inline bool LocationMessageWrapper::has_message() const {
  return msg_case() == kMessage;
}
inline void LocationMessageWrapper::set_has_message() {
  _oneof_case_[0] = kMessage;
}
inline void LocationMessageWrapper::clear_message() {
  if (has_message()) {
    delete msg_.message_;
    clear_has_msg();
  }
}
inline const ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage& LocationMessageWrapper::_internal_message() const {
  return *msg_.message_;
}
inline ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage* LocationMessageWrapper::release_message() {
  // @@protoc_insertion_point(field_release:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.message)
  if (has_message()) {
    clear_has_msg();
      ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage* temp = msg_.message_;
    msg_.message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage& LocationMessageWrapper::message() const {
  // @@protoc_insertion_point(field_get:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.message)
  return has_message()
      ? *msg_.message_
      : *reinterpret_cast< ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage*>(&::com::example::peopledensitymeasurementprototype::model::proto::_WarnMessage_default_instance_);
}
inline ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage* LocationMessageWrapper::mutable_message() {
  if (!has_message()) {
    clear_msg();
    set_has_message();
    msg_.message_ = CreateMaybeMessage< ::com::example::peopledensitymeasurementprototype::model::proto::WarnMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.example.peopledensitymeasurementprototype.model.proto.LocationMessageWrapper.message)
  return msg_.message_;
}

inline bool LocationMessageWrapper::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void LocationMessageWrapper::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline LocationMessageWrapper::MsgCase LocationMessageWrapper::msg_case() const {
  return LocationMessageWrapper::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace model
}  // namespace peopledensitymeasurementprototype
}  // namespace example
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_definitions_2eproto
